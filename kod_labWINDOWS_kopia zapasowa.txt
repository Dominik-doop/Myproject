#include <analysis.h>
#include <cvirte.h>		
#include <userint.h>
#include "ZC.h"

static int panelHandle, ctrlarray;
double faza = 0;
double tab[100000];
double amplituda;
double czestotliwosc;

int main (int argc, char *argv[])
{
	if (InitCVIRTE (0, argv, 0) == 0)
		return -1;	/* out of memory */
	if ((panelHandle = LoadPanel (0, "ZC.uir", PANEL)) < 0)
		return -1;
	ctrlarray = GetCtrlArrayFromResourceID (panelHandle, CTRLARRAY);
	DisplayPanel (panelHandle);
	RunUserInterface ();
	DiscardPanel (panelHandle);
	return 0;
}

int CVICALLBACK panel (int panel, int event, void *callbackData,
		int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_GOT_FOCUS:

			break;
		case EVENT_LOST_FOCUS:

			break;
		case EVENT_CLOSE:

			break;
	}
	return 0;
}

int CVICALLBACK koniec (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			QuitUserInterface (0);
			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_RIGHT_DOUBLE_CLICK:

			break;
	}
	return 0;
}
void Generuj(void)
{
	int sygnal;
	
	GetCtrlVal (panelHandle, PANEL_SYGNAL, &sygnal);
	switch (sygnal)
			{
				case 0:
					SineWave (10000, amplituda, 7.8125e-1, &faza, tab);			  //10k to z ilu zostanie zrobiony cały sygnał, a czestotliwosc to ilosc punktow na jeden cykl
					break;
				case 1:
					SawtoothWave (256, amplituda, 7.8125e-2, &faza, tab);
					break;
				case 2:
					SquareWave (256, amplituda, 7.8125e-3, &faza, 50.0, tab);
					break;
				case 3:
					TriangleWave (256, amplituda, czestotliwosc, &faza, tab);
					break;			
			}
	DeleteGraphPlot (panelHandle, PANEL_WYKRES, -1, VAL_IMMEDIATE_DRAW);
	PlotY (panelHandle, PANEL_WYKRES, tab, 60, VAL_DOUBLE, VAL_THIN_LINE,
		   VAL_EMPTY_SQUARE, VAL_SOLID, 1, VAL_RED);
	
}	  
int CVICALLBACK start (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	
	switch (event)  
	{
		case EVENT_COMMIT:
		int sygnal;
			Generuj();
			break;
	}
	return 0;
}
int CVICALLBACK wyswietl (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
		YGraphPopup ("Przebieg1", tab, 1000, VAL_DOUBLE);		  //1000 to liczba punktów z który zostanie wypluty na Ygraf
			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_RIGHT_DOUBLE_CLICK:

			break;
	}
	return 0;
}

int CVICALLBACK Amplituda (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			 GetCtrlVal (panelHandle, PANEL_AMPLITUDA, &amplituda);
			break;
		case EVENT_VAL_CHANGED:

			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_RIGHT_DOUBLE_CLICK:

			break;
	}
	return 0;
}

int CVICALLBACK Czestotliwosc (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:
			 GetCtrlVal (panelHandle, PANEL_CZESTOTLIWOSC, &czestotliwosc);
			break;
		case EVENT_VAL_CHANGED:

			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_RIGHT_DOUBLE_CLICK:

			break;
	}
	return 0;
}

int CVICALLBACK probkowanie (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2)
{
	switch (event)
	{
		case EVENT_COMMIT:

			break;
		case EVENT_VAL_CHANGED:

			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_RIGHT_DOUBLE_CLICK:

			break;
	}
	return 0;
}
